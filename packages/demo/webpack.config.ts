import * as path from 'path';
import * as webpack from 'webpack';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import MonacoWebpackPlugin from 'monaco-editor-webpack-plugin';

const CircularDependencyPlugin = require('circular-dependency-plugin')

const config: webpack.Configuration = {
    resolve: {
        extensions: ['.tsx', '.ts', '.js'],
        mainFields: ['main', 'module', 'browser'],
        fallback: {
            path: require.resolve('path-browserify'),
        },
    },
    entry: './src/index.ts',
    target: 'web',
    devtool: 'source-map',
    module: {
        rules: [
            {
                test: /\.(js|ts|tsx)$/,
                exclude: /node_modules/,
                use: 'ts-loader',
            },
            {
                test: /\.css$/,
                use: ['style-loader', 'css-loader'],
            },
            {
                test: /\.ttf$/,
                use: ['file-loader'],
            },
        ],
    },
    devServer: {
        static: path.join(__dirname, 'app'),
        historyApiFallback: true,
        compress: true,
        hot: true,
        port: 3000,
    },
    output: {
        path: path.resolve(__dirname, 'app'),
        filename: 'js/[name].js',
        publicPath: '/',
        libraryTarget: 'global',
    },
    plugins: [
        new HtmlWebpackPlugin({
            filename: 'index.html', // Change to this
            template: './index.html',
        }),
        new MonacoWebpackPlugin(),
        new CircularDependencyPlugin({
            // `onStart` is called before the cycle detection starts
            onStart({compilation}: { compilation: any }) {
                console.log('start detecting webpack modules cycles');
            },
            // `onDetected` is called for each module that is cyclical
            onDetected({module: webpackModuleRecord, paths, compilation}: {
                module: any;
                paths: any[];
                compilation: any;
            }) {
                // `paths` will be an Array of the relative module paths that make up the cycle
                // `module` will be the module record generated by webpack that caused the cycle
                // compilation.errors.push(new Error(paths.join(' -> ')))
            },
            // `onEnd` is called before the cycle detection ends
            onEnd({compilation}: { compilation: any }) {
                console.log('end detecting webpack modules cycles');
            },
        })
    ],
};


export default config;
